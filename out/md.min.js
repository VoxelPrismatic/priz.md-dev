/* THIS FILE IS AUTOMATICALLY GENERATED
 * BY `min.py`. DO NOT EDIT THIS FILE.
 */
//Find
function find_in(thing, ids) {var ls = [];for(var id of ids.split(" ")) {if(id.startsWith("."))
ls.push(...thing.getElementsByClassName(id.slice(1)));else if(id.startsWith(">"))
ls.push(...thing.getElementsByTagName(id.slice(1)));else if(id.startsWith(":"))
ls.push(...thing.getElementsByName(id.slice(1)));else
return thing.getElementById(id);}
return ls;}
function find(ids) {return find_in(document, ids);}
function findHtml_in(thing, ids) {var ls = [];var elm = find_in(thing, ids);try {for(var e of elm)
ls.push(e.innerHTML);}
catch(err) {return elm.innerHTML;}
if(ls.length == 1)
return ls[0]
return ls;}
function findHtml(ids) {return findHtml_in(document, ids);}
function findOHtml_in(thing, ids) {var ls = [];var elm = find_in(thing, ids);try {for(var e of elm)
ls.push(e.outerHTML);}
catch(err) {return elm.outerHTML;}
return ls;}
function findOHtml(ids) {return findOHtml_in(document, ids);}
function findVal_in(thing, ids) {var ls = [];var elm = find_in(thing, ids);try {for(var e of elm)
ls.push(e.value);}
catch(err) {return elm.value;}
return ls;}
function findVal(ids) {return findVal_in(document, ids);}
function Elm(typ, txt, params = {}, end = true) {var str = "<" + typ;for(var key of params.constructor["entries"](params))
str += ` ${key[0]}="${key[1]}"`;str += `>${txt}`
if(end)
str += `</${typ}>`;return str;}
function setHtml(thing, val) {find(thing).innerHTML = val;}
function addHtml(thing, val) {find(thing).innerHTML += val;}
function scroll_(ids) {try {if(ids.endsWith("~"))
ids = ids.slice(0, -1);find(ids).scrollIntoView({behavior: "smooth"});}
catch(err) {console.log(err);}}
function scrollIfNeeded(ids) {find(ids).scrollIntoViewIfNeeded({behavior: "smooth"});}
function scrollBy(ids, x, y) {find(ids).scrollBy(x, y, {behavior: "smooth"});}
function scrollXY(ids, x, y) {find(ids).scroll(x, y, {behavior: "smooth"});}
function locate(thing, parent = find("list"), loc = "find_command") {var pages = parent.children;re = regex(thing, loc);var nothidden = false;for(var page of pages) {if(page.tagName != "DIV")
continue;page.classList.remove("invis");page.style.display = "block";if(re != 1) {if(page.className.includes("collapser")) {if(!page.className.includes("collopen")) {collapser(page);}
var donthideme = locate(thing, page, loc);if(!donthideme) {page.style.display = "none";page.classList.add("invis");collapser(page);}
nothidden = nothidden || donthideme;}
else {var rawtext;if(page.children.length) {rawtext = page.children.item(0).innerHTML;rawtext += page.children.item(1).innerHTML;}
else {rawtext = page.innerHTML;}
if(rawtext.search(re) != -1) {nothidden = true
page.classList.remove("invis");}
else {page.style.display = "none";page.classList.add("invis");}}}}
if(re == 1) {collall();}
return nothidden;}
function locater(elem) {locate(elem.value, elem.parent, elem.id);}
function locateId(id) {locater(find(id));}
function delayFunction(func, start, end, interval, ...args) {for(var x = start; x < end; x += interval) {window.setTimeout(func, x, ...args);}}
function delaySwapColor(theme, ...args) {delayFunction(swapColor, 0, 3000, 100, theme, ...args);}
function delaySetTransitions() {delayFunction(setTransitions, 1000, 4000, 100);}
function delayUpdateSpacer() {delayFunction(updateSpacer, 0, 100, 25);}
function delayResizeDicts() {delayFunction(resizeDicts, 0, 100, 25, false);}
function compSty(elem) {try {return window.getComputedStyle(elem);}
catch(err) {try {return window.getComputedStyle(find(elem));}
catch(err) {return window.getComputedStyle(find(elem)[0]);}}}
function sub_styles() {if(find(">table")) {styleTables();}
if(find(".accent")) {style_accents();}
if(find(".dict")) {resizeDicts();}}
function updateSpacer() {}
function styleTables() {for(var table of find(">table")) {for(var tbody of table.children) {for(var tr of tbody.children) {var ti = tr.children;var length = Math.floor(ti.length);var n = 0;for(var td of ti) {td.classList.remove("tr-l");td.classList.remove("tr-r");if(n < ti.length / 2) {td.classList.add("tr-l");}
else if(n > length) {td.classList.add("tr-r");}
n += 1;}}}}}
function linkMe(elem) {elem.scrollIntoView({behavior: "smooth"});var id = elem.id;if(id[0] != "#") {id = "#" + id;}
window.history.replaceState(window.history.state, document.title, id);}
function toggleDrop(elem) {if(elem.classList.toggle("h-dropper-closed")) {elem.innerHTML = "[V]";}
else {elem.innerHTML = "[\u039b]";}
elem.parentElement.parentElement.classList.toggle("dropper-closed");resizeDicts(false, elem.parentElement.parentElement);elem.scrollIntoView({behavior: "smooth"});}
function style_accents() {for(var acc of find(".accent")) {var char = acc.previousElementSibling;char.style.display = "inline-block";acc.style.position = "relative";var ok_accents = ["\u0300",
"\u0301",
"\u0302",
"\u030c",
"\u0303",
"\u0322",
"\u0321",
"\u0327",
"\u0309"]
;if(!ok_accents.includes(acc.innerHTML)) {acc.style.left = (-char.clientWidth / 2) + "px";}
else {acc.style.left = "";}
if("ABCDEFGHIJKLMNOPQRSTUVWXYZbdfhklt".includes(char.innerHTML)) {acc.style.top = "-4px";}}}
function resizeDicts(log = true, element = document) {if((window.innerHeight + "" + window.innerWidth).includes("."))
return;var height = compSty(">H1").height.slice(0, -2) / 2;if(log) {console.log("Window resized to " + window.innerWidth + "x" + window.innerHeight);console.log("Resizing elements");}
var tooSmol = false;for(var thing of find_in(element, ".dict")) {var parent = thing.parentElement;if(parent.clientWidth == 0) {continue;}
var width = parent.clientWidth - 5;var thisWidth = width;var style = thing.style;thisWidth -= thing.nextElementSibling.clientWidth;thisWidth -= thing.previousElementSibling.clientWidth;style.width = (thisWidth - 10) + "px";style.marginLeft = "5px";style.marginRight = "5px";style.height = "2px";style.lineHeight = height + "px";style.display = "inline-block";style.borderColor = "#444f";style.top = "";if(thisWidth < 100) {tooSmol = true;}
thing.parentElement.style.minHeight = height + "px";thing.parentElement.style.height = height + "px";var func = dictsPerfect;}
if(tooSmol) {for(var thing of find(".dict")) {var parent = thing.parentElement;var width = parent.clientWidth - 5;thing.style.top = (height + 10) + "px";thing.parentElement.style.minHeight = (2 * height + 20) + "px";thing.parentElement.style.height = (2 * height + 20) + "px";thing.style.width = width + "px";thing.style.margin = "auto";}
var func = dictsTooSmol;}
delayFunction(func, 0, 4000, 1000);updateSpacer();}
function dictsTooSmol() {for(var thing of find(".dict")) {var parent = thing.parentElement;var width = parent.clientWidth - 5;thing.style.width = width + "px";}}
function dictsPerfect() {for(var thing of find(".dict")) {var parent = thing.parentElement;var width = parent.clientWidth - 5;var thisWidth = width;thisWidth -= thing.nextElementSibling.clientWidth;thisWidth -= thing.previousElementSibling.clientWidth;thing.style.width = (thisWidth - 10) + "px";}}
function collsel(elem = find("list")) {var ch = elem.children;var itm = null;for(var c of ch) {if(c.className.includes("collhover"))
itm = null;var tmp = collsel(c);if(tmp != null)
return itm}
return itm;}
function setcoll(elem) {colldesel();if(!elem.className.includes("collopen") && elem.className.includes("collapser")) {var child = elem.children;for(var c of child) {if(c.style.display == "block" && !c.className.includes("invis")) {collapser(elem);break;}}}}
function setjump(elem) {colldesel(find("sect"));if(!elem.className.includes("collopen") && elem.className.includes("collapser")) {var child = elem.children;for(var c of child) {if(c.style.display == "block" && !c.className.includes("invis")) {collapser(elem);break;}}}}
function colldesel(elem = find("list")) {var ch = elem.children;for(var c of ch) {if(c.className.includes("collhover"))
collapser(c, true);colldesel(c);}}
var timeout = false;function collapser(elem, force = false) {if(globalThis.timeout && !force)
return;globalThis.timeout = true;window.setTimeout(function() {globalThis.timeout = false;}, 500);if(elem.className.includes("lnk")) {for(var cat of find("list").children)
for(var lnk of cat.children)
if(lnk.className.includes("sel"))
lnk.classList.remove("sel");elem.classList.add("sel");setHtml("com_help", findHtml(elem.id.slice(4)));return;}
if(elem == undefined || elem == null)
return;var disp = true;var name = "collapser collopen";if(elem.className.includes("collopen")) {disp = false;name = "collapser";}
var thing = elem.children;for(var child of thing) {if(child.tagName != "DIV")
continue;if(disp && !child.className.includes("invis"))
child.style.display = "block";else
child.style.display = "none";}
elem.className = name;}
function collall(parent = find("list"), sub = false) {var child = parent.children;for(var c of child) {c.classList.remove("invis");if(c.className.includes("collapser")) {collall(c, true);c.classList.remove("collopen");}
if(sub) {c.style.display = "none";}}}
function trim(str) {return str.replace(/<br>/gm, "\n").replace(/^([ \u200b\n]+)/, "").replace(/([ \u200b\n]+)$/, "").trim();}
var hexs = [];function rngHex(len = 16) {var st = "";for(var x = 0; x < len; x += 1)
st += Math.floor(Math.random() * 16).toString(16)
if(globalThis.hexs.includes(st))
st = rngHex();globalThis.hexs.push(st);return st;}
function esc(st) {st = st.replace(/\\u\{([a-fA-F0-9]+)\}/gm, function(m, p1) {return String.fromCharCode("0x" + p1);});var lnk = "";for(var c of st) {lnk += "\\u{" + c.charCodeAt(0).toString(16) + "}";}
return lnk}
function mark(st) {for(var r of line_regex__) {if(typeof r[1] == "string" && !(r[1].startsWith("\\u")))
st = st.replace(r[0], r[1]);else
st = st.replace(r[0], r[1]);}
return st;}
function load_script(src) {globalThis.src__ = src;fetch(src).then(resp => resp.text().then(code => {globalThis.eval(code);console.info(`Finished loading '${src__}'`);}));}
function mark_page(st) {if(!line_regex__[0])
set_regex__();if(!(st.endsWith("\n")))
st += "\n";st = st.replace(/\\ *\n/gm, "");var str = "";var py = "";var table = "";var ol = "";var ul = "";var al = "";var quoted = "";var dropper = "";var syntax = "";var code = "";var incode = false;var indropper = false;var intable = false;for(var line of st.split("\n")) {
if(!incode && line && line.replace(/^\>\>\[.*\]\<\<$/gm, "") == "")
indropper = true;if(!incode && line == "---" && indropper) {indropper = false;str += mk_dropper__(dropper.slice(0, -1));dropper = "";continue;}
if(indropper) {dropper += line + "\n";continue;}
if(line.match(/^\`\`\`(\w+)?/gm)) {incode = !incode;if(incode) {syntax = line.slice(3).trim();}
else {if(syntax) {str += `<div class="code">`;try {try {var fn = syntax_alias__[syntax];}
catch(err) {load_script(`${base__}lang/base-lang.min.js`);load_script(`${base__}lang/index-lang.min.js`)}
if(typeof fn == "string")
syntax = syntax_alias__[syntax];fn = syntax_alias__[syntax];if(fn == undefined) {load_script(`${base__}lang/${syntax}-lang.min.js`);redefine_aliases__();fn = syntax_alias__[syntax];}
str += fn(code);}
catch(err) {console.error(err);str += code;}}
else {str += code;}
str += "</div>";code = "";syntax = "";}
continue;}
if(incode) {code += line + "\n";continue;}
if(line.startsWith(":: ")) {quoted += line.slice(3) + "\n";continue;}
if(quoted) {str += "<blockquote>" + mark_page(quoted.slice(0, -1)).slice(0, -4) + "</blockquote>";quoted = "";}
if(line && line.replace(/^(\|.+)+\|$/gm, "") == "" && !intable) {intable = true;}
if((line == "---" || line == "" || line.replace(/^(\|.+)+\|$/gm, "") != "") && intable) {str += mk_table__(table).replace(/\n/gm, "<br>");table = "";intable = false;continue;}
if(intable) {table += line + "\n";continue;}
if(line && line.replace(/^\d+[\]\)\.\-] .*$/gm, "") == "") {ol += line.replace(/^\d+[\]\)\.\-] /gm, "") + "\n";continue;}
if(ol) {str += mk_ol__(ol.slice(0, -1));ol = "";}
if(line && line.replace(/^\w+[\]\)\.\-] .*$/gm, "") == "") {al += line.replace(/^\w+[\]\)\.\-] /gm, "") + "\n";continue;}
if(al) {str += mk_al__(al.slice(0, -1));al = "";}
if(line && line.replace(/^[\>\]\)\~\-\+] .*$/gm, "") == "") {ul += line.slice(2) + "\n";continue;}
if(ul) {str += mk_ul__(ul.slice(0, -1));ul = "";}
line = mark(line);if(line.endsWith("<br>"))
str += line.slice(0, -4) + "<br>";else if(line.endsWith("§"))
str += line.slice(0, -1);else if(line.includes("</br>"))
str += line.replace(/<\/br>/gm, "");else
str += line+"\n";}
str = str.replace(/\n/gm, "<br>");str = str.replace(/\<((\/)?(h\d|div|ol|ul))\>([ \n]*\<br\>[ \n]*)+/gm, "<$1$2><br>");str = str.replace(/([ \n]*\<br\>[ \n]*)+\<((\/)?(h\d|div|ol|ul))\>/gm, "<br><$2$3>");str = str.replace(/(<br>)*?<(\/)blockquote>(<br>)*?/gm, "<$2blockquote>");window.setTimeout(sub_styles, 100);return str;}
var line_regex__ = [];function set_regex__() {line_regex__ = [[/\\([^uUNx])/gm, function(m, p) {return "\\u{" + p.charCodeAt(0).toString(16) + "}";}],
[/^ /gm, "\u200b \u200b"],
[/\&gt;/gm, ">"],
[/\&lt;/gm, "<"],
[/\&amp;/gm, "&"],
[/e\[(.+?)\]<(.+?)>/gm,
function(m, p1, p2) {return `<a href="mailto:${esc(p2)}">${esc(mark(p1))}</a>`;}], [/p\[(.+?)\]<(.+?)>/gm,
function(m, p1, p2) {return `<a href="tel:${esc(p2)}">${esc(mark(p1))}</a>`;}], [/\%\[(.+?)\]<(.+?)>/gm,
function(m, p2, p1) {p1 = p1.toLowerCase();var st = "<span class='";if(p1.includes("h")) {st += "flip-h ";}
if(p1.includes("v")) {st += "flip-v ";}
var st = st.slice(0, -1) + "'>" + p2 + "</span>";return st;}], [/\?\[(.+?)\]<(.+?)>/gm,
function(m, p1, p2) {return `<span title="${esc(p2)}" class="def">${esc(mark(p1))}</span>`;}], [/\@\[(.+?)\]<(.+?)>\((.*)\)/gm,
function(m, p1, p2, p3) {return `<img alt="${esc(mark(p1).replace(/"/gm, "'"))}" width="${p3}" src="${esc(p2)}">`;}], [/\@\[(.+?)\]<(.+?)>/gm,
function(m, p1, p2) {return `<img alt="${esc(mark(p1).replace(/"/gm, "'"))}" src="${esc(p2)}">`;}], [/\+\[\[(.+?)\]\]\<(.+?)\>/gm,
function(m, p1, p2) {return `<a href="${esc(p2)}" target='\\x5fblank'><span class='btn'>${esc(mark(p1))}</span></a>`;}], [/\+\[(.+?)\]\<(.+?)\>/gm,
function(m, p1, p2) {return `<a href="${esc(p2)}" target='\\x5fblank'>${esc(mark(p1))}</a>`;}], [/\[\[(.+?)\]\]\<(.+?)\>/gm,
function(m, p1, p2) {return `<a href="${esc(p2)}"><span class='btn'>${esc(mark(p1))}</span></a>`;}], [/\[(.+?)\]\<(.+?)\>/gm,
function(m, p1, p2) {return `<a href="${esc(p2)}">${esc(mark(p1))}</a>`;}], [/e<<(.+?)>>/gm,
function(m, p1) {return `<a href="mailto:${esc(p1)}>${esc(p1)}</a>`;}], [/p<<(.+?)>>/gm,
function(m, p1) {return `<a href="tel:${esc(p1)}>${esc(p1)}</a>`;}], [/<<(.+?)>>/gm,
function(m, p1) {return `<a href="${esc(p1)}>${esc(p1)}</a>`;}],
[/^\\x([A-Fa-f0-9]{2})/gm, "\\u{$1}"],
[/^\\U([A-Fa-f0-9]{8})/gm, "\\u{$1}"],
[/^\\u([A-Fa-f0-9]{4})/gm, "\\u{$1}"],
[/^\\N\{(.+?)\}/gm, function(m, p) {return "\\u{"+unimap(p.toUpperCase())+"}";}],
[/([^\\])\\x([A-Fa-f0-9]{2})/gm, "$1\\u{$2}"],
[/([^\\])\\U([A-Fa-f0-9]{8})/gm, "$1\\u{$2}"],
[/([^\\])\\u([A-Fa-f0-9]{4})/gm, "$1\\u{$2}"],
[/([^\\])\\N\{(.+?)\}/gm, function(m, a, p) {return a+"\\u{"+unimap(p.toUpperCase())+"}";}],
[/\\([^u])/gm, function(m, p1) {return `\\u{${p1.charCodeAt(0).toString(16)}}`;}],
[/^\#{1,6}\] +(.+)$/gm, mk_head__],
[/^\#(.+?)\#/gm, "<b>$1</b>"],
[/^\*(.+?)\*/gm, "<i>$1</i>"],
[/^\_(.+?)\_/gm, "<u>$1</u>"],
[/^\~(.+?)\~/gm, "<s>$1</s>"],
[/^\`(.+?)\`/gm, function(m, p1) {return `<span class="code">${esc(p1)}</span>`}],
[/^\>\^(.+?)\^\</gm, "<sup>$1</sup>"],
[/^\>v(.+?)v\</gm, "<sub>$1</sub>"],
[/^\>\!(.+?)\!\</gm, `<span class="hide" onclick="this.classList.toggle('unhide');">$1</span>`],
[/([^\\])\#(.+?)\#/gm, "$1<b>$2</b>"],
[/([^\\])\*(.+?)\*/gm, "$1<i>$2</i>"],
[/([^\\])\_(.+?)\_/gm, "$1<u>$2</u>"],
[/([^\\])\~(.+?)\~/gm, "$1<s>$2</s>"],
[/([^\\])\`(.+?)\`/gm, function(m, p1, p2) {return `${p1}<span class="code">${esc(p2)}</span>`}],
[/([^\\])\>\^(.+?)\^\</gm, "$1<sup>$2</sup>"],
[/([^\\])\>v(.+?)v\</gm, "$1<sub>$2</sub>"],
[/([^\\])\>\!(.+?)\!\</gm, `$1<span class="hide" onclick="this.classList.toggle('unhide');">$2</span>`],
[/(.*)\:\^\:(.*)/gm,
"<div style='height: 24px;'><div style='float: left;'>$1</div><div class='dict'></div><div style='float: right;'>$2</div></div></br>"],
[/^\:\<\:(.+)/gm, "<div style='text-align: left;'>$1</div>"],
[/^\:\>\:(.+)/gm, "<div style='text-align: right;'>$1</div>"],
[/^\:v\:(.+)/gm, "<div style='text-align: center;'>$1</div>"],
[/^\:=\:(.+)/gm, "<div style='text-align: justified;'>$1</div>"],
[/\{\{(\w+?)\}\}(.+?) /gm, "<span class='$1'>$2 </span>"],
[/^--([\w\d_.-]+)--$/gm, "<div id='$1'></div></br>"],
[/\\ *$/gm, "</br>"],
[/^-~-$/gm, "<div class='line'></div></br>"],
[/(<u>_<\/u>|___)/gm, "<div>"],
[/===/gm, "</div>"],
[/(.)\$(.+?)\;/gm,
function(m, p2, p1) {var accent = accents[p1] || "";if(p2 == "i")
p2 = "ı";if(p2 == "j")
p2 = "ȷ";return `<span>${p2}</span><span class="accent">${accent}</span>`;}],
[/\\u\{([a-fA-F0-9]+)\}/gm,
function(m, p1) {var st = String.fromCharCode("0x" + p1);if(st == "<")
return "&lt;"
if(st == ">")
return "&gt;"
return st;}],];}
var accents = {"+</": "\u0300",
"-</": "\u0316",
"+</</": "\u030f",
"+</_": "\u1dc5",
"+.</.": "\u1dc0",
"+_</": "\u1dc6",
"+<//</": "\u1dc8",
"+/": "\u0301",
"-/": "\u0317",
"+//": "\u030b",
"+_/": "\u1dc4",
"+./.": "\u1dc1",
"+/_": "\u1dc7",
"+/<//": "\u1dc9",
"+^": "\u0302",
"-^": "\u032d",
"2+^": "\u1dcd",
"+^^": "\u1ab0",
"+v": "\u030c",
"-v": "\u032c",
"+~": "\u0303",
"-~": "\u0330",
":~": "\u0334",
"+^~": "\u033e",
"+!~": "\u034a",
"2+~": "\u0360",
"+.": "\u0307",
"-.": "\u0323",
"-..": "\u0324",
"+..": "\u0308",
"+>.": "\u0358",
"+u": "\u0306",
"+<u": "\u0311",
"-u": "\u032e",
"-<u": "\u032f",
"2-u": "\u035c",
"2+u": "\u035d",
"2+<u": "\u0361",
"+u_": "\u1dcb",
"+_u": "\u1dcc",
"2-<u": "\u2dfc",
"+o": "\u030a",
"-(": "\u031c",
"-o": "\u0325",
"-)": "\u0339",
"+(": "\u0351",
"+)": "\u0357",
"-oo": "\u035a",
"+.o.": "\u1ab1",
"+_": "\u0304",
"-_": "\u0331",
"2+_": "\u035e",
"2-_": "\u035f",
">:": "\u02d0",
"+'": "\u031b",
"+<c": "\u0309",
"-<c": "\u0327",
"-]": "\u0321",
"-[": "\u0322"}
;function mk_ul__(st, thing = "ul") {var str = `<${thing}>`;st = mark_page(st);for(var line of st.split("<br>")) {if(line) {if(line.startsWith("<ul>") || line.startsWith("<ol>")) {str = str.slice(0, -5);str += line + "</li>";}
else {str += `<li>` + line + "</li>";}}}
return str + `</${thing}><br>`;}
function mk_head__(m, p1, escape = true, cls = "") {if(cls == m) {cls = "";}
if(escape + "" != "false" && escape + "" != "true")
escape = true;for(var x = 0; x < 6; x += 1)
if(m[x] != "#")
break;var id_ = p1.replace(/(\\u\{.*\}|[^\w\d])/gm, "").trim();var st = `<h${x} onclick="linkMe(this);"`;var thing = "\\u{23}";if(!escape) {thing = "#";p1 = mark(p1)}
if(cls) {st += ` class="${cls}"`;}
st += ` id="${id_}">${thing}] ${p1}</h${x}>`;return st;}
function mk_al__(st) {return mk_ul(st, "al");}
function mk_ol__(st) {return mk_ul(st, "ol");}
function mk_table__(st) {var table_lines = -1;var table_aligns = [];var table_str = [];var str = "";for(var line of st.split("\n")) {if(line != "" && line.replace(/^(\|.+)+\|$/gm, "") == "") {table_lines += 1
table_str.push([]);if(table_lines == 0) {for(var header of line.split("|").slice(1, -1)) {header = trim(header);if(header.startsWith(":") && header.endsWith(":")) {table_str[0].push(trim(header.slice(1, -1)));table_aligns.push("center");}
else if(header.startsWith(":")) {table_str[0].push(trim(header.slice(1)));table_aligns.push("left");}
else if(header.endsWith(":")) {table_str[0].push(trim(header.slice(0, -1)));table_aligns.push("right");}
else {table_str[0].push(trim(header));table_aligns.push("left");}}}
else {for(var cell of line.split("|").slice(1, -1)) {table_str.slice(-1)[0].push(trim(cell));}
var max_len = 0;for(var row of table_str)
if(row.length > max_len)
max_len = row.length;for(var r = 0; r < table_str.length; r++)
while(table_str[r].length < max_len) {table_str[r].push("");if(r == 0)
table_aligns.push("left");}}
continue;}}
var row_num = -1;str += "<table>";for(var row of table_str) {row_num += 1;str += "<tr>";var col_num = -1;for(var col of row) {col_num += 1;if(row_num == 0)
str += Elm("th", mark_page(col), {style: "text-align: "+table_aligns[col_num]});else
str += Elm("td", mark_page(col), {style: "text-align: "+table_aligns[col_num]});}
str += "</tr>";}
str += "</table>";return str.replace(/<br><\/t(d|h)>/gm, "</t$1>");}
function mk_dropper__(st) {var str = "";var id = st.split("\n")[0].slice(3, -3);var heading = mk_head(id, id.split(" ").slice(1).join(" "), false);var thing = heading.slice(-5);heading = heading.slice(0, -5);heading += "<span class='h-dropper h-dropper-closed' onclick='toggleDrop(this)'>[V]</span>";heading += thing;id = "DROP_" + heading.split("id=")[1].split(">")[0].slice(1, -1);str += `<div id=${id} class="dropper dropper-closed">`;str += heading + "<div>" + mark_page(st.split("\n").slice(1).join("\n"));str += "</div></div>";return str;}
